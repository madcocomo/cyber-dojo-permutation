{"output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n........\nTime: 2.22\n\nOK (8 tests)\n\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","instructions":"Note: The initial code and test files form a\nsimple example to start you off.\nThey are *not* related to the chosen exercise,\nwhose instructions now follow...\n- - - - - - - - - - - - - - - - - - - - - - -\n\nGet all possiable order from a list.","ReorderTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport java.util.*;\n\npublic class ReorderTest {\n\n    @Test\n    public void testOrders_Empty() {\n        List actual = Reorder.orders(new ArrayList<Integer>());\n        List<List<Integer>> expect = new ArrayList<List<Integer>>();\n        expect.add(new ArrayList<Integer>());\n        assertEquals(expect, actual);\n    }\n\n    @Test\n    public void testOrders_1() {\n        List actual = Reorder.orders(Arrays.asList(1));\n        assertEquals(Arrays.asList(Arrays.asList(1)), actual);\n    }\n\n    @Test\n    public void testOrders_12() {\n        List actual = Reorder.orders(Arrays.asList(1,2));\n        List<List> expect = Arrays.asList(Arrays.asList(1,2),\n            Arrays.asList(2,1));\n        assertEquals(expect, actual);\n    }\n    \n    @Test\n    public void testOrders_22() {\n        List actual = Reorder.orders(Arrays.asList(2,2));\n        List<List> expect = Arrays.asList(Arrays.asList(2,2));\n        assertEquals(expect, actual);        \n    }\n\n    @Test\n    public void testOrders_122() {\n        List actual = Reorder.orders(Arrays.asList(1,2,2));\n        List<List> expect = Arrays.asList(Arrays.asList(1,2,2),\n          Arrays.asList(2,1,2),Arrays.asList(2,2,1));\n        assertEquals(expect, actual);        \n    }\n\n    @Test\n    public void testOrders_123() {\n        List actual = Reorder.orders(Arrays.asList(1,2,3));\n        List<List> expect = Arrays.asList(\n          Arrays.asList(1,2,3),Arrays.asList(2,1,3),Arrays.asList(2,3,1),\n          Arrays.asList(1,3,2),Arrays.asList(3,1,2),Arrays.asList(3,2,1));\n        assertEquals(expect, actual);        \n    }\n\n    @Test\n    public void testOrders_212() {\n        List actual = Reorder.orders(Arrays.asList(2,1,2));\n        List<List> expect = Arrays.asList(Arrays.asList(2,1,2),\n          Arrays.asList(1,2,2),Arrays.asList(2,2,1));\n        assertEquals(expect, actual);        \n    }\n\n    @Test\n    public void testOrders_big() {\n        List actual = Reorder.orders(Arrays.asList(1,2,3,4,5,6,7,8,1));\n        assertEquals(181440, actual.size());\n        assertTrue(actual.contains(Arrays.asList(8,5,2,3,1,1,7,6,4)));\n    }\n\n\n\n\n\n}","Reorder.java":"import java.util.*;\n\npublic class Reorder {\n\n    public static List<List<Integer>> orders(List<Integer> list) {\n        List<List<Integer>> result = \n            new ArrayList<List<Integer>>();\n        result.add(new ArrayList<Integer>());\n        for (int i=1; i<=list.size(); i++) {\n            int toMix = list.get(list.size()-i);\n            Set<List<Integer>> temp = new LinkedHashSet<List<Integer>>();\n            for (List<Integer> partList : result)\n                temp.addAll(mixInto(toMix, partList));\n            result.clear();\n            result.addAll(temp);\n        }\n        return result;\n    }\n\n    public static List<List<Integer>> mixInto(int toMix, List<Integer> list) {\n        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>();\n        for(int i=0; i<=list.size(); i++)\n        {\n            List<Integer>newList = new ArrayList<Integer>(list);\n            newList.add(i,toMix);\n            if (!result.contains(newList)) {\n                result.add(newList);\n            }\n        }\n        return result;        \n    }\n\n\n\n\n\n\n}\n\n    \n"}