{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"Reorder.java:17: error: ')' expected\n        if (!list.get(0).equals(list.get(1)) {\n                                            ^\n1 error\n","instructions":"Note: The initial code and test files form a\nsimple example to start you off.\nThey are *not* related to the chosen exercise,\nwhose instructions now follow...\n- - - - - - - - - - - - - - - - - - - - - - -\n\nGet all possiable order from a list.","ReorderTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport java.util.*;\n\npublic class ReorderTest {\n\n    @Test\n    public void testOrders_Empty() {\n        List actual = Reorder.orders(new ArrayList<Integer>());\n        List<List> expect = new ArrayList<List>();\n        expect.add(new ArrayList());\n        assertEquals(expect, actual);\n    }\n\n    @Test\n    public void testOrders_One() {\n        List actual = Reorder.orders(Arrays.asList(1));\n        assertEquals(Arrays.asList(Arrays.asList(1)), actual);\n    }\n\n    @Test\n    public void testOrders_two() {\n        List actual = Reorder.orders(Arrays.asList(1,2));\n        List<List> expect = Arrays.asList(Arrays.asList(1,2),\n            Arrays.asList(2,1));\n        assertEquals(expect, actual);\n    }\n    \n    @Test\n    public void testOrders_twosame() {\n        List actual = Reorder.orders(Arrays.asList(1,1));\n        List<List> expect = Arrays.asList(Arrays.asList(1,1));\n        assertEquals(expect, actual);        \n    }\n\n\n\n\n\n\n\n}","Reorder.java":"import java.util.*;\n\npublic class Reorder {\n\n    public static List<List<Integer>> orders(List<Integer> list) {\n        ArrayList<List<Integer>> result = \n            new ArrayList<List<Integer>>();\n        result.add(list);\n        if (list.size() == 2) {\n            result.add(exchange(list));\n        }\n        return result;\n    }\n    \n    public static List<Integer> exchange(List<Integer> list) {\n        List<Integer> newList = new ArrayList<Integer>();\n        if (!list.get(0).equals(list.get(1)) {\n            newList.add(list.get(1));\n            newList.add(list.get(0));\n        }\n        return newList;\n    }\n}"}